[gcode_macro Carto_QGL] # safer and faster QGL for Cartographer
gcode:
    _CG28 # or use a conditional or safe homing
    QUAD_GANTRY_LEVEL horizontal_move_z=10 retries=0 retry_tolerance=1.000
    QUAD_GANTRY_LEVEL horizontal_move_z=3
    G28 Z

[gcode_macro BED_MESH_CALIBRATE]
rename_existing: _BED_MESH_CALIBRATE
gcode:
    {% set TARGET_TEMP = printer.heater_bed.target %}
    M140 S0
    _BED_MESH_CALIBRATE {rawparams}
    M140 S{TARGET_TEMP}

[cartographer]
canbus_uuid: d678ad4df7c8
speed: 40 #   Z probing dive speed.
lift_speed: 5.0 #   Z probing lift speed.
backlash_comp: 0.01628 #   Backlash compensation distance for removing Z backlash before measuring the sensor response. Offsets are measured from the centre of your coil, to the tip of your nozzle on a level axis. It is vital that this is accurate. 
x_offset: 0.0 #   X offset of cartographer from the nozzle.
y_offset: 21.1 #   Y offset of cartographer from the nozzle.
trigger_distance: 2.0 #   cartographer trigger distance for homing.
trigger_dive_threshold: 1.5 #   Threshold for range vs dive mode probing. Beyond `trigger_distance + trigger_dive_threshold` a dive will be used.
trigger_hysteresis: 0.006 #   Hysteresis on trigger threshold for untriggering, as a percentage of the trigger threshold.
cal_nozzle_z: 0.1 #   Expected nozzle offset after completing manual Z offset calibration.
cal_floor: 0.1 #   Minimum z bound on sensor response measurement.
cal_ceil: 5.0 #   Maximum z bound on sensor response measurement.
cal_speed: 1.0 #   Speed while measuring response curve.
cal_move_speed: 10.0 #   Speed while moving to position for response curve measurement.
default_model_name: default #   Name of default cartographer model to load.
mesh_main_direction: x #   Primary travel direction during mesh measurement.
#mesh_overscan: -1 #   Distance to use for direction changes at mesh line ends. Omit this setting and a default will be calculated from line spacing and available travel.
mesh_cluster_size: 1 #   Radius of mesh grid point clusters.
mesh_runs: 2 #   Number of passes to make during mesh scan.

tc_a_a:1.5360789231892044e-05
tc_a_b:-1.3535348013928257
tc_b_a:-0.00032210896441748537
tc_b_b:34.59609106142593

[safe_z_home]
home_xy_position: 150, 150
speed: 250.0
z_hop: 10
z_hop_speed: 15.0
#move_to_previous: False

[gcode_macro PROBE_CALIBRATE]
gcode:
    CARTOGRAPHER_CALIBRATE


[bed_mesh]
speed: 250
horizontal_move_z: 1
mesh_min: 40, 40
mesh_max: 260,260
probe_count: 15,15 # Values should be odd, so one point is directly at bed center
algorithm: bicubic
#fade_start: 0.6
fade_end: 0
#bicubic_tension: 0.2
zero_reference_position: 150,150

[quad_gantry_level]
gantry_corners:
	-60,-10
	360,370
points:
    80,60
	80,220
	240,220
	240,60
speed: 250
horizontal_move_z: 10
retries: 5
retry_tolerance: 0.05
max_adjust: 10

[force_move]
enable_force_move: True

#####################################################################
#	Macros
#####################################################################

[gcode_macro CENTER]
gcode:
    G90
    G1 X150 Y150 Z20 F6000

[gcode_macro Z_HZ]
gcode:
    _CG28
    CQGL
    G90
    G1 Z172 F1200
    
[gcode_macro XY_HZ]
gcode:
    _CG28
    CQGL
    G90
    G1 X150 Y115 F6000

[gcode_macro LOWER_Y]
description: Lower Y 100mm
gcode:
  G90
  SET_KINEMATIC_POSITION Y=100
  G0 Y0 F3000
  M84

[gcode_macro LOWER_X]
description: Lower X 100mm
gcode:
  G90
  SET_KINEMATIC_POSITION X=100
  G0 X0 F3000
  M84
  
[gcode_macro HIGHER_Z]
description: Higher Z 30mm to avoid dock-crash while homing
gcode:
  G90
  SET_KINEMATIC_POSITION Z=0
  G0 Z30 F2000
  M84

[gcode_macro LOWER_Z]
description: Lower Z 20mm
gcode:
  G90
  SET_KINEMATIC_POSITION Z=20
  G0 Z0 F2000
  M84
  
[gcode_macro M155]
description: read and display distance on the screen on a 'S'chedule.
variable_repeat_timer: 0
gcode:
  {% if 'S' in params %}
  {% set seconds = params.S|int %}
    #RESPOND MSG="time in seconds:"{seconds}
    SET_GCODE_VARIABLE MACRO=M155 VARIABLE=repeat_timer VALUE={seconds}
    UPDATE_DELAYED_GCODE ID=respond_temp_timer DURATION={seconds}
  {% endif %}
  
[delayed_gcode respond_temp_timer]
initial_duration: 0
gcode:
#    {% set time = params.VALUE|int %}
#    RESPOND MSG="time2 in seconds:"{params.REPEAT}%
    M102 S-2
    UPDATE_DELAYED_GCODE ID=respond_temp_timer DURATION={printer['gcode_macro M155'].repeat_timer}
    
[gcode_macro list_sensors]
gcode:
  { action_respond_info(printer.heaters.available_heaters | join(', ')) }
  { action_respond_info(printer.heaters.available_sensors | join(', ')) }

[gcode_macro PRINT_START]
gcode:
    LEDS_HIGH
    STATUS_READY
    SET_FAN_SPEED FAN=electronics_circulation_fan SPEED=1.0
    SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0
    {% set bedtemp = params.BED|int %}
    {% set hotendtemp = params.HOTEND|int %}
    {% set chambertemp = params.CHAMBER|default(0)|int %}
    {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
    {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}
    STATUS_HOMING
    _CG28
    G90
    BED_MESH_CLEAR
    
# Checks if the bed temp is higher than 90c - if so then trigger a heatsoak.
  {% if params.BED|int > 89 %}
    SET_DISPLAY_TEXT MSG="Bed: {bedtemp}c"
    CENTER
    STATUS_HEATING
    M190 S{bedtemp}
    SET_DISPLAY_TEXT MSG="Heatsoak: {chambertemp}c"
    TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={chambertemp}

    # If the bed temp is not over 90c, then it skips the heatsoak and just heats up to set temp with a 5min soak
  {% else %}
    SET_DISPLAY_TEXT MSG="Bed: {bedtemp}c"
    CENTER
    STATUS_HEATING
    M190 S{bedtemp}
    SET_DISPLAY_TEXT MSG="Soak for 2.5min"
    G4 P150000
  {% endif %}

    STATUS_LEVELING
    SET_DISPLAY_TEXT MSG="QGL"
    CQGL
    STATUS_MESHING
    SET_DISPLAY_TEXT MSG="Bed mesh"
    G90
    BED_MESH_CALIBRATE

# Heats up the nozzle up to target via data from slicer
    SET_DISPLAY_TEXT MSG="Hotend: {hotendtemp}c"
    STATUS_HEATING
    M104 S{hotendtemp}
    HEATING_WAIT
    STATUS_HEATING
    M109 S{hotendtemp}
    STATUS_CLEANING
    CLEAN_NOZZLE
    G90
    CENTER
    #SKEW_PROFILE LOAD=default

# Gets ready to print by doing a purge line and updating the SB-leds
    STATUS_PRINTING
    SET_DISPLAY_TEXT MSG="Printing Started"          # Displays info
    #G1 E5 F3600
    #LINE_PURGE


[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    STATUS_BUSY
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-2 F3000                 ; retract filament
    G91                            ; relative positioning
    G0 X20 Y20 Z1 F20000    ; move nozzle to remove stringing
    TURN_OFF_HEATERS
    M107                           ; turn off fan
    G1 Z2 F3000                    ; move nozzle up 2mm
    G90                            ; absolute positioning
    #G1 Y260 F6000            ; park nozzle at rear
    G1 X190 Y300 F6000
    BED_MESH_CLEAR
    STATUS_CLEANING
    CLEAN_NOZZLE
    G91
    G1 Y-10 F3000
    SET_FAN_SPEED FAN=electronics_circulation_fan SPEED=0.33
    SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0
    STATUS_OFF
    LEDS_OFF
    #SET_SKEW CLEAR=1

# Park front center
[gcode_macro HEATING_WAIT]
gcode:
    G1 X190 Y300 Z20 F3000 

[gcode_macro PARKFRONT]
gcode:
    _CG28                              ; home if not already homed
    SAVE_GCODE_STATE NAME=PARKFRONT
    G90                               ; absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F6000        
    RESTORE_GCODE_STATE NAME=PARKFRONT

# Park front center
[gcode_macro PARKFRONTHIGH]
gcode:
    _CG28                              ; home if not already homed
    SAVE_GCODE_STATE NAME=PARKFRONTHIGH
    G90                               ; absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z*3/4} F6000        
    RESTORE_GCODE_STATE NAME=PARKFRONTHIGH

# Park front center, but low down.
[gcode_macro PARKFRONTLOW]
gcode:
    _CG28                             ; home if not already homed
    SAVE_GCODE_STATE NAME=PARKFRONTLOW
    G90                              ; absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F6000                                     
    RESTORE_GCODE_STATE NAME=PARKFRONTLOW

# Park top rear left
[gcode_macro PARKREAR]
gcode:
    _CG28                             ; home if not already homed
    SAVE_GCODE_STATE NAME=PARKREAR
    G90                              ; absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2-20} Y{printer.toolhead.axis_maximum.y-10} Z50 F6000     
    RESTORE_GCODE_STATE NAME=PARKREAR

# Park at center of build volume
[gcode_macro PARKCENTER]
gcode:
    _CG28                              ; home if not already homed
    SAVE_GCODE_STATE NAME=PARKCENTER
    G90                               ; absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F6000    
    RESTORE_GCODE_STATE NAME=PARKCENTER

# Park 15mm above center of bed
[gcode_macro PARKBED]
gcode:
    _CG28                               ; home if not already homed
    SAVE_GCODE_STATE NAME=PARKBED
    G90                                ; absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z15 F6000                                     
    RESTORE_GCODE_STATE NAME=PARKBED

[gcode_macro FULL_SHAPER_VIBRATIONS]
gcode:
    _CG28
    CQGL
    CENTER
    AXES_SHAPER_CALIBRATION
    CREATE_VIBRATIONS_PROFILE
    CENTER

[gcode_macro AUTO_INPUT_SHAPER]
gcode:
    _CG28
    CQGL
    CENTER
    AXES_SHAPER_CALIBRATION
    CENTER

[gcode_macro BELT_CALIB_LOCATION]
gcode:
    XY_HZ
    Z_HZ

[gcode_macro SHUTDOWN]
gcode:
  {action_call_remote_method("shutdown_machine")}

[gcode_macro REBOOT]
gcode:
  {action_call_remote_method("reboot_machine")}

[gcode_macro DATA_SAMPLE]
gcode:
  {% set bed_temp = params.BED_TEMP|default(110)|int %}
  {% set nozzle_temp = params.NOZZLE_TEMP|default(250)|int %}
  {% set min_temp = params.MIN_TEMP|default(40)|int %}
  {% set max_temp = params.MAX_TEMP|default(70)|int %}
  G90
  M106 S255
  RESPOND TYPE=command MSG='Waiting for Coil to cool to 40'
  M117 Waiting for Coil to cool to 40
  TEMPERATURE_WAIT SENSOR='temperature_sensor cartographer_coil' MAXIMUM={min_temp}
  RESPOND TYPE=command MSG='Starting Phase 1 of 4'
  M117 Starting Phase 1 of 4
  M106 S0
  G28
  G0 Z1
  M104 S{nozzle_temp}
  M140 S{bed_temp}
  G4 P1000
  TEMPERATURE_WAIT SENSOR='temperature_sensor cartographer_coil' MINIMUM={min_temp}
  CARTOGRAPHER_STREAM FILENAME=data1
  M117 Waiting for Coil to heat to 70
  RESPOND TYPE=command MSG='Waiting for Coil to heat to 70'
  TEMPERATURE_WAIT SENSOR='temperature_sensor cartographer_coil' MINIMUM={max_temp}
  CARTOGRAPHER_STREAM FILENAME=data1
  M104 S0
  M140 S0
  M106 S255
  G0 Z80
  RESPOND TYPE=command MSG='Waiting for Coil to cool to 40'
  M117 Waiting for Coil to cool to 40
  TEMPERATURE_WAIT SENSOR='temperature_sensor cartographer_coil' MAXIMUM={min_temp}
  M117 Starting Phase 2 of 4
  RESPOND TYPE=command MSG='Starting Phase 2 of 4'
  M106 S0
  G28 Z0
  G0 Z2
  M104 S{nozzle_temp}
  M140 S{bed_temp}
  G4 P1000
  CARTOGRAPHER_STREAM FILENAME=data2
  M117 Waiting for Coil to heat to 70
  RESPOND TYPE=command MSG='Waiting for Coil to heat to 70'
  TEMPERATURE_WAIT SENSOR='temperature_sensor cartographer_coil' MINIMUM={max_temp}
  CARTOGRAPHER_STREAM FILENAME=data2
  M104 S0
  M140 S0
  M106 S255
  G0 Z80
  RESPOND TYPE=command MSG='Waiting for Coil to cool to 40'
  M117 Waiting for Coil to cool to 40
  TEMPERATURE_WAIT SENSOR='temperature_sensor cartographer_coil' MAXIMUM={min_temp}
  M117 "Starting Phase 3 of 4"
  RESPOND TYPE=command MSG='Starting Phase 3 of 4'
  M106 S0
  G28 Z0
  G0 Z3
  M104 S{nozzle_temp}
  M140 S{bed_temp}
  G4 P1000
  CARTOGRAPHER_STREAM FILENAME=data3
  M117 Waiting for Coil to heat to 70
  RESPOND TYPE=command MSG='Waiting for Coil to heat to 70'
  TEMPERATURE_WAIT SENSOR='temperature_sensor cartographer_coil' MINIMUM={max_temp}
  CARTOGRAPHER_STREAM FILENAME=data3
  M104 S0
  M140 S0
  RESPOND TYPE=command MSG='Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/cartographer-klipper/'
  M117 "Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/cartographer-klipper/"
  RESPOND TYPE=command MSG='Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta'
  M117 "Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta"